Topic Closure:

In JavaScript, the inner function can access the variable declared in its Lexical Scope (Parent function). This special feature is known as Closure.


function x(){
 for (let i =1; i<=5; i++){  
    setTimeout(function(){
      console.log(i);
    },i * 1000);
 }
}


function y(){
 for (var i =1; i<=5; i++){  
    setTimeout(function(){
      console.log(i);
    },i * 1000);
 }
}


function z(){
 for (var i =1; i<=5; i++){
    function close(x){  
    setTimeout(function(){
      console.log(x);
    },x * 1000);
  }
   close(i)
 }
 console.log("Hi SP... Good Evening!!")
}

--------------------------

function xyz(){
 for (var i =1; i<=5; i++){
    function close(x){  
    setTimeout(function(){
      console.log(x);
    },x * 1000);
  }
   close(i)
   console.log("Hello...!!!")
 }
 console.log("Hi Sanu... Good Morning!!")
};
--------------------

function abc(){
 for (var i =1; i<=5; i++){
    function close(x){  
    setTimeout(function(){
      console.log(x);
      console.log("Hello...!!!")
    },x * 1000);
  }
   close(i)
 }
 console.log("Hi Sanu... Good Morning!!")
};

---------------------------

What is Block Scope in Javascript? 

In JS, if a variable is declared with let keyword then it will be accesible with in that particular block where it is declared only. 
One cannot access outside of it. The scope of such variable is known as Block Scope.

let and Const variable has Block scope only. Var has global scope. 

CallStack -------  In JS everything is excuted in callstack

Global Execution Context --------- Whenever any execution starts in JS engine a GEC has been created and it will be pushed to call stack

Event Loop ---- It always checks into the Callback Queue. If anything found it will push the same to Call stack for execution once the callStack is empty
Event Loop ---- It always checks into the Callback Queue. If anything found it will push the same to Call stack for execution once the callStack is empty

Callback Queue ----- JS is single Threaded. It waits for none. So, if the function is asynchronous, after comletion it will be moved to Call back Queue

Microtask Queue ----------- Same as call back Queue with Higher Priority (Network calls, Promises generally goes to Microtask Queue)

What is First Class Function ??

JS has special feature. It can accept a function with in another function as an argument and return a function just like any another variable. 
One can assign a function to a variable also. In such case, the higher Order function is known as First Class function.

A programming language is said to have First class function when the function in that language are treated as any other variable.

Undefined and Not defined are different thing in Javascript. Undefined is a Primitive data type in Javascript.
Array and Function both are reffered to as Object or Reference type in JavaScript.

-------------------------------------------------------

Hoisting: - Unlike any other language in JavaScript, the JS engine allocates memory before the execution of a single line JavaScript code. 
It creates Global Execution Context and allocates memory for each variable and function.
Initially any variable hold the value as undefined.This overall concept is known as Hoisting in JavaScript.

We can declare a variable in JavaScript with three different Keyword as 'var', 'let' and 'const'.
Among them var belongs to the window object. It has its global scope. But let and const don't have the global scope. Instead They have block scope.

Before initialization, we can access global variable which is declared with var keyword. Although the value is undefined then. 

We shall get Reference error as the variable is not defined while trying to access a variable with let keyword befor its initialization.

If we declare a variable as constant and try to reassign the same variable, we shall get a type Error as the value of constant variable cannot be reassigned.

Temporal Dead Zone -- 
In case of let and contant variable, once the variable is decalred but its initialization is not done. 
Then we can say that the variable is in Temporal Dead Zone.

In GEC the memory allocation for var, let and const variables are done differently.
var is stored in GLobal memory whereas let and const are stored in script memory.

----------------------------------------------------
What will be the o/p of the below code snippet?

console.log(a);
console.log(b);
let a = 10;
var b = 100;

Reference Error : a is not defined
----------------------------------------------------------

Temporal Dead Zone ----------------- zone between a variable decalaration and its intialization

console.log(a);
console.log(b);
let a = 10;
var a = 100;

Will throw a Syntax error as variable has already been declared

console.log(a);
const a = 100;
a = 10;

Reference error: Cannot access 'a' before intialization 

const a;
a = 10;
console.log(a);

Syntax Error: Missing Initalizer in const variable

const a= 80;
a = 10;
console.log(a);

Uncaught TypeError: Assignment to constant variable

What are the CSS Selector in JavaSvript?

In a web page, if we need to style a particular element we have to provide a identifier to the element to acess the same through JavaScript. 
To Access each element, we can use different CSS selectors. 

i.e. getElementById, getElementsByClassName, getElementsByTagName, querySelector, querySelectorAll

--------------------------------------------------------------
What is Callback in JavaScript??

In Javascript we can call a function from another function. Such function is known as callback function. 
We can pass the callback function to the Higher order function as an argument just like any other variable.

Until the completion of first function, the second one waits. At the end of the Higher Order function, the callback function is called.

-----------------------------------------------------------------

Promises in JavaScript:-

Promise object represents an eventual completion or failure of an asynchronous Javascript operation. 

Whenever a function is executing in JavaScript, it can return a function as Promise which will take two parameters as resolve and reject. 
Generally we consider Promises in case of asynchronous process. 

The Promise object supports two properties: state and result.
It can bed either pending or Succesful or Rejected state.

Promise is an object in JavaScript that Represents Eventual Completion or Failure of an Asynchronous operation. In JavaScript, One can call a function within another function. The Outer function is known as higher order function and the inner function is known as callback. But it is not a good practice to use multiple callback functions one after another (Callback Hell). It decreases the readability of the code and developer may loss control of the program which is known as Inversion of Control. It is always recommended to use the promise to get rid of such problems. Promise Object contains two properties as State and Result. Initially it should be in Pending State. Once the execution is done it will be either resolved state or rejected. If and only if the promise is resolved successfully, it will call the callback function immediately. It is always better to use promise chaining instead of multiple callbacks. Now-a-days people use "async/await"  also instead of promise. But async-await also works in the same manner by returning a promise object which guarantees eventual completion or failure of an asynchronous operation in JavaScript. 

------------------------------------------------------------------------

function sum(){
  let sum = 0;
  for(let i in arguments){
     sum+= arguments[i];
  }
  console.log(`The Sum is ${sum}`);
}

Will return 25

-----------------------------------

let arr =[10,7,8];

let val = sum("Sanu", ...arr);

console.log(`The Sum is ${val}`);

Will return '0Sanu1078'

---------------------------
REST operator (...args in the below example is used with the help of REST operator)

function sum1(name, ...args){
  console.log(arguments);
   
  document.write(`Hi, My name is ${name} </br>`);
  let sum = 0;
  for(let i in args){
     sum+= args[i];
  }
  console.log(`I have got ${sum} marks`);
};
 
sum1("Sanu", 76,85,69);

o/p -  Hi, My name is Sanu
I have got 230 marks

args will be Placed at the end always. 
-----------------------------------------

Spread operator is used to concateniate two or more objects in Javascript.

----------------------------------------
const c;
console.log(`c: ${c}`);

c = 10;
console.log(`c: ${c}`);

It will Through an error as :
Uncaught SyntaxError: Missing initializer in const declaration

Beacuse We can't just declare a variable as const without initializing it. Otherwise it will throw a Syntax error in JavaScript.

--------------------------------------------------

var c;
console.log(`c: ${c}`);

c = 10;
console.log(`c: ${c}`);

o/p - 
 c: undefined
 c: 10

Initially the variable c is in Temporal Dead Zone before it's value initialization

let l;
console.log(`l: ${l}`);

c = 10;
console.log(`l: ${l}`);

The result will be same.
-------------------------------
Async and Await:-

To make a function async, one just need to use async keyword before the function while declaring the same. async returns promise (Promise value and Promise Status).
Await just make the function to wait until its execution completes. 


async function test(){

   console.log('Inside test function');
   const response = await fetch('https://jsonplaceholder.typicode.com/users');
   console.log('Before Response');
   const users = await response.json();
   console.log('Finally Resolved');
   return users;
}

console.log('Before Calling test');
let a = test();
console.log('After Calling test');
console.log(a);
a.then(data => console.log(data));
console.log('----------- The END ------------');

o/p:-

  Before Calling test
  Inside test function
  After Calling test
  Promise {<pending>}
----------- The END ------------
  Before Response
  Finally Resolved
 
(10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]
0: {id: 1, name: "Leanne Graham", username: "Bret", email: "Sincere@april.biz", address: {…}, …}
1: {id: 2, name: "Ervin Howell", username: "Antonette", email: "Shanna@melissa.tv", address: {…}, …}
2: {id: 3, name: "Clementine Bauch", username: "Samantha", email: "Nathan@yesenia.net", address: {…}, …}
3: {id: 4, name: "Patricia Lebsack", username: "Karianne", email: "Julianne.OConner@kory.org", address: {…}, …}
4: {id: 5, name: "Chelsey Dietrich", username: "Kamren", email: "Lucio_Hettinger@annie.ca", address: {…}, …}
5: {id: 6, name: "Mrs. Dennis Schulist", username: "Leopoldo_Corkery", email: "Karley_Dach@jasper.info", address: {…}, …}
6: {id: 7, name: "Kurtis Weissnat", username: "Elwyn.Skiles", email: "Telly.Hoeger@billy.biz", address: {…}, …}
7: {id: 8, name: "Nicholas Runolfsdottir V", username: "Maxime_Nienow", email: "Sherwood@rosamond.me", address: {…}, …}
8: {id: 9, name: "Glenna Reichert", username: "Delphine", email: "Chaim_McDermott@dana.io", address: {…}, …}
9: {id: 10, name: "Clementina DuBuque", username: "Moriah.Stanton", email: "Rey.Padberg@karina.biz", address: {…}, …}
length: 10
__proto__: Array(0)

--------------------------------------------
In the below mentioned example the let variable 'l' was in Temporal Dead Zone. 
So, one can't access the variable until and unless it is intialized to a specific value.

let x = function(){
if(true){
  console.log(v);
  console.log(l);
  var v = 2;
  let l = 1;
}

};

x();

This Will a Refernce error as cannot access 'l' before Initialization.
---------------------------------------------------------------------------
Promises in JavaScript:-


function prom(){
return new Promise(function(resolve,reject){
console.log('Please wait... Fetching Data')
const response = fetch('https://jsonplaceholder.typicode.com/users');
if(response){
  console.log('Data Has been retrievd sucessfully');
  resolve(response)
  }else{
  console.log('Unable to fetch the data')
  reject(response) 
  }
 console.log('----Wait------------ We are Preparing the data for you');
});
}

let onFulfilment = (result) =>{
console.log('Inside onFulfilment');
if(result.status == 200){
 async function users(result){
 let u = await result.json();
   console.log(u);
   }
 users(result);
 }
}

let onRejection = (error) =>{
 console.log('Inside onRejection');
 console.log(error);
}

prom().then(onFulfilment).catch(onRejection);

----------------------------------------------------------------

function prom(complete){
return new Promise(function(resolve,reject){
console.log('Please wait... Fetching Data')
setTimeout(()=>{ 
if(complete){
  resolve('I am Successful');
  }else{
  reject('I am Failure');
  }
 },3000)
});
}

let onFulfilment = (result) =>{
 console.log(result);
}

let onRejection = (error) =>{
 console.log(error);
}

prom(true).then(onFulfilment).catch(onRejection);
-------------------------------------------------------------------
Call, Apply and Bind in Javascript (Polyfill)
---------------------------------------------------------------------------------


function x(){
let name = {
  firstname: "Subhransu",
  lastname: "Porel"
}
let name2 = {
  firstname: "Rishabh",
  lastname: "Pant"
}
let name3 = {
  firstname: "Rahul",
  lastname: "Dravid"
}
let name4 = {
  firstname: "Sachin",
  lastname: "Tendulkar"
}

let printName = function (hometown, state, country){
	console.log(this.firstname +" " + this.lastname +" from  "+ hometown +", "+ state +", "+country)
}


console.log(printName.call(name2, "Delhi" , "UP", "India")); 
console.log(printName.apply(name3, ["Bangalore", "Karnatak", "India"]));

let printMyName = printName.bind(name, "Kolkata" , "West Bengal", "India");
printMyName();

Function.prototype.mybind = function(...args){
  let obj= this;
  params = args.slice(1);
  return function(...args2){
    obj.apply(args[0], [...params, ...args2]);
 }
}

let printMyName2 = printName.mybind(name4, "Mumbai", "Maharastra");
printMyName2("India");
console.log(printMyName);
console.log(Function.prototype.mybind);
}
x();
-------------------------------------------------
let arr = [12, 18, 14, 17, 16, 12, 13, 14, 16, 17, 17,18];

function removeDuplicates(array, el, index){
  const result = array.filter((el, index)=>array.indexOf(el) === index);  
  return result;
}

let uniqueArray = removeDuplicates(arr);

console.log(uniqueArray);

o/p: [12, 18, 14, 17, 16, 13]

--------------------------------------------------
Function Currying in Javascript
-------------------------------------------
Function Currying is a technique in functional programmimg, transformation of the function of multiple arguments into several functions of a single argument in sequence.
There are two ways to achieve currying in Javascript. Either by using Bind method or by using Closure.

function sum(a){
 return function(b){
   return function(c){ 
       return (a+b+c);
   }
 }
}

console.log(sum(3)(5)(7));
o/p: 15 

 function calculate(operation){
   return function(a){
      return function(b){
      if(operation === "add"){
         return a+b;
       }
       else if(operation === "sub"){
         return a-b;
       }
       else if(operation === "multiply"){
         return a*b;
       }
       else if(operation === "division"){
         return a/b;
       }
       else return "Invalid Operation";
      }
   }
 }

console.log("sum", 3, 4) ; // 7
console.log("multiply",4,5); // 20

function y(){
let multiply = function(x,y){
console.log(x*y);
}

 let multiplyByTwo = multiply.bind(this, 2, 9);
 multiplyByTwo(18);

 let multiplyByThree = multiply.bind(this);
 console.log(this);
 multiplyByThree(3, 22);
}
y();
-----------------------------------
Interview Question on Event Loop, setTimeout and setInterval
---------------------------------------------------------------

function x(){
let c = 0;

let timer = setInterval(()=>{
  console.log(c++);
  },200);

console.log("Welcome");

setTimeout(()=>{
  clearInterval(timer)
},2000)

}
x();

o/p :-

Line No:8 Welcome
Line No:5 0
Line No:5 1
Line No:5 2
Line No:5 3
Line No:5 4
Line No:5 5
Line No:5 6
Line No:5 7
Line No:5 8
Line No:5 9
--------------------------
--------------------------
let nums = [1, 2, 2, 3, 4, 4] ;
console.log(new Set(nums));
--------------------------------

function x(){
 var v = "Sanu";
 let l = "Bristi";
 
 var check = 
  function internal(){
  var v ="Subransu";
  let l ="Arpita"; 
 
  console.log(v);
  console.log(l);
 }

 console.log(v);
 console.log(l);

 check();
}
x();
-------------------------------------
let x = function(){
  return;
  {
	message: 'hi';
 }
}

console.log(x());
--------------------------------------------------
const arr = [10, 5, 9 , 18, 27, 36, 8, 21, 17];
console.log(arr.sort((a,b)=>{
return (a - b);
}));


----------------------------------

Shallow Copy:

var a = {a: 20};
var b = a;
b.a = 40;
console.log(a);
console.log(b);

o/p- {a: 40}
     {a: 40}

-------------------

Deep Copy:

var a = {a: 20};
var b = {...a};
b.a = 40;
console.log(a);
console.log(b);

o/p- {a: 20}
     {a: 40}

------------------------

const users = [
{firstName:'Sanu',lastName:'Porel',age: 32},
{firstName:'Arpita',lastName:'Metia',age:23},
{firstName:'Mampu',lastName:'Mondal',age:28},
{firstName:'Bristi',lastName:'Porel',age:23},
{firstName:'Arjya',lastName:'Layek',age:30},
]

const output = users.filter((x) => x.age < 30).map((y)=> y.firstName + " "+ y.lastName);

console.log(output);

----------------------------------------------
const users = [
{firstName:'Sanu',lastName:'Porel',age: 32},
{firstName:'Arpita',lastName:'Metia',age:23},
{firstName:'Mampu',lastName:'Mondal',age:28},
{firstName:'Bristi',lastName:'Porel',age:23},
{firstName:'Arjya',lastName:'Layek',age:30},
]

const output = users.filter((x) => x.lastName === 'Porel').map((y)=> y.firstName + " "+ y.lastName);

console.log(output);
-----------------------------------------------
const users = [
{firstName:'Sanu',lastName:'Porel',age: 32},
{firstName:'Arpita',lastName:'Metia',age:23},
{firstName:'Mampu',lastName:'Mondal',age:28},
{firstName:'Bristi',lastName:'Porel',age:23},
{firstName:'Arjya',lastName:'Layek',age:30},
]

const output = users.reduce(function(acc, curr){
 if(acc[curr.age]){
  acc[curr.age] = ++  acc[curr.age];
 }else{
 acc[curr.age] = 1
 }
  return acc; 
},{});

console.log(output);
-----------------------------------------------

const users = [
{firstName:'Sanu',lastName:'Porel',age: 32},
{firstName:'Arpita',lastName:'Metia',age:23},
{firstName:'Mampu',lastName:'Mondal',age:28},
{firstName:'Bristi',lastName:'Porel',age:23},
{firstName:'Arjya',lastName:'Layek',age:30},
]

const output = users.reduce(function(acc, curr){
 if(acc[curr.lastName]){
  console.log(curr.firstName + " " + curr.lastName);
  acc[curr.lastName] = ++ acc[curr.lastName];
 }else{
 acc[curr.lastName] = 1
 }
  return acc; 
},{});

console.log(output);
-------------------------------------------------

// program to display a text using setTimeout method
let arr = [12, 18, 14, 17, 16, 12, 13, 14, 16, 17, 17,18];

//let uniqueArray = Array.from(new Set([...arr]));
//let uniqueArray = [...new Set(arr)];

function removeDuplicates(arr){
    return arr.reduce((newArr,currval)=>{
     if (!newArr.includes(currval)){
          newArr.push(currval);
     } 
     return newArr;
    })
}

let uniqueArray =removeDuplicates(arr);
 
console.log(uniqueArray);

o/p: - (6) [12, 18, 14, 17, 16, 13]

-------------------------------------------------
// program to display a text using setTimeout method
let arr = [12, 18, 14, 17, 16, 12, 13, 14, 16, 17, 17,18];

//let uniqueArray = Array.from(new Set([...arr]));
//let uniqueArray = [...new Set(arr)];

console.log(arr.indexOf(14));

function removeDuplicates(array){
    
    return  array.filter((el, index)=>
         array.indexOf(el) === index;)
    
}

let uniqueArray = removeDuplicates(arr);

console.log(uniqueArray);

--------------------------------------------------
let obj1 = {"name":"Sanu","age":30,"sex":"Male"};
let obj2 = {"city":"Kolkata", "zip":711401, "Phone":8116074024};

let newObj = Object.assign({}, obj1, obj2);

console.log(newObj);
console.log(Object.keys(newObj));

--------------------------------------

const arr = [2, 8, 1, 8, 7, 6, 2, 5, 6, 1, 7, 9];
arr.sort();
console.log(arr);
const len = arr.length;
let b = [];

for (i = 0; i< len; i++){
 if(b.indexOf(arr[i])=== -1){
     b.push(arr[i]);
  } 
}

console.log(b);

-------------------------------------------
But here the complexity of the Program is very high Order of (n*n). So, Instead of Doing this, we can take a different approach
--------------------------------------------------------------------------------------------------------------------------------
const arr = [2, 8, 1, 8, 7, 6, 2, 5, 6, 1, 7, 9];
arr.sort();
console.log(arr);
const len = arr.length;
let b = [];
var temp;

for (i = 0; i< len; i++){
 if(arr[i] !== temp){
     b.push(arr[i]);
    temp = arr[i];
  } 
}

console.log(b);
-----------------------------------------------------------------

let profile = {name:'Sanu'};
profile.age=30;
console.log(profile);

let newProfile = {...profile};
newProfile.salary = 35000;
console.log(newProfile);
console.log(profile);
console.log(profile.salary);

----------------------------------------
map, filter, reduce
-----------------------------------------
const arr = [10, 7, 6, 5, 8, 9, 12, 19, 23, 21];

const findMax = arr.reduce(function(max,curr){
  if(curr > max){
   max = curr
  }
 return max
},0)

console.log(findMax); 

o/p:-23
-----------------------------------------------
const ages = [10, 7, 6, 5, 8, 9, 12, 19, 23, 21];
const adualt = arr.filter(x => x>=18).sort();
console.log(adualt);
-------------------------------------------------
const marks = [27, 38, 32, 39, 55, 48, 19, 22, 18, 17, 30];
const passMarks = marks.map(x => x+ 10).filter(y => y >= 30);
console.log(passMarks);
----------------------------------------------------
const arr = [10, 7, 6, 5, 8, 9, 12, 19, 23, 21];

const findMax = arr.reduce(function(max,curr){

  if(curr > max){
   max = curr
  }
 return max
},0)

console.log(findMax);
---------------------------------
const users = [
{firstName:'Sanu',lastName:'Porel',age: 32},
{firstName:'Arpita',lastName:'Metia',age:23},
{firstName:'Mampu',lastName:'Mondal',age:28},
{firstName:'Bristi',lastName:'Porel',age:23},
{firstName:'Arjya',lastName:'Layek',age:30},
]

var op = {};
const output = users.map(function(x){
if(x.lastName){
  op[x.lastName] = op[x.lastName].push(x.firstName)
 }
else{
  op[x.lastName] = x.firstName;
 }
})

console.log(output);


{'Porel':['Sanu', 'Bristi'], 'Metia': ['Arpita'], 'Mondal':['Mampu'], 'Layek': ['Arjya']};
----------------------------------------------------------------------------------------

const users = [
{firstName:'Sanu',lastName:'Porel',age: 32},
{firstName:'Arpita',lastName:'Metia',age:23},
{firstName:'Mampu',lastName:'Mondal',age:28},
{firstName:'Bristi',lastName:'Porel',age:23},
{firstName:'Arjya',lastName:'Layek',age:30},
]

const output = users.reduce(function(acc,curr){
  if(curr.age < 30){
    acc.push(curr.firstName)
 }
   return acc;
},[])

console.log(output);
-----------------------------------------------------------------------------------------------
const users = [
{firstName:'Sanu',lastName:'Porel',age: 32},
{firstName:'Arpita',lastName:'Metia',age:23},
{firstName:'Mampu',lastName:'Mondal',age:28},
{firstName:'Bristi',lastName:'Porel',age:23},
{firstName:'Arjya',lastName:'Layek',age:30},
]

let temp ;
const output = users.reduce(function(acc,curr){
   if(acc[curr.lastName]){
     acc[curr.lastName] = curr.firstName;
     console.log(curr.lastName);
     console.log(curr.firstName);
   }else{
    acc[curr.lastName] = curr.firstName; 
    }
  return acc
},{})

console.log(output);

-----------------------------------------------
Difference Between Slice and Splice in Javascript
---------------------------------------------------

let arr = [1, 2, 3, 4, 5, 6, 7];
let arr2 = arr.slice(2,4);
console.log(arr);
console.log(arr2);


o/p:-

[1, 2, 3, 4, 5, 6, 7]
[3, 4]

let arr = [1, 2, 3, 4, 5, 6, 7];
let arr2 = arr.splice(2,4);
console.log(arr);
console.log(arr2);

o/p:-

[1, 2, 7]
[3, 4, 5, 6]

------------------------------------------------------------------------------------------------------------------------------------
How to find the parameters from a URL in object format?

const url = window.location.href;
console.warn("URL -", url);
const searchParams = window.location.search;
console.warn("Search Params -  ", searchParams);
const params = {};
const paramPairs = searchParams.substring(1).split("&");
console.warn("param Pairs = ", paramPairs);
paramPairs.forEach((pair)=>{
	const [key, value] = pair.split("=");
	params[key] = value;
})
console.warn("params - ", params);

------------------------------------------------------------------------------------------------------------------------------------

Need to find out the total count of each fruits in an object as a key value pair. 

const fruits = [
  {Apple: 6, Orange: 7, Grape: 5},
  {Orange: 2, Lemon: 3, Banana: 4},
  {Lemon: 3, Orange: 4, pineapple: 4}
]
const countedFruits = {};
fruits.forEach(el =>{
  for(each in el){
    if(countedFruits[each]){
      countedFruits[each] = countedFruits[each] + el[each]
    }
    else{
      countedFruits[each] = el[each]
    }
  }
})
console.log(countedFruits);

-----------------------------------------------------------------------------------------------------------------------------------
Handling Nested Array and Finding Unique Elements from the array:

let arr = [1, [1, 2, [1, 2, 3, 5, [1, 2, 3, 4, 5]]]];
let newArr = [... new Set(arr.flat(Infinity))];
console.warn(newArr);

Find out the identical key value pairs from two different objects:

const input1 = {a: 1, b: 2, c: 3, d: 10, e: 12, f: 6} ;
const input2 = {a: 5, b: 7, e: 12, d: 10};

const output = {};

for(let key in input1){
    if(input1[key] === input2[key]){
        output[key] = input1[key];
    }
}

console.log(output);
-----------------------------------------------------------------------------------------------------------------------------------
OTP Generator Function: 

let otpgenerator = (digit) => {
    let num = '0123456789';
    let otp = '';
    for(let i=1; i<=digit; i++){
        otp +=num[Math.floor(Math.random()*10)];
    }
    return otp;
}

console.log(otpgenerator(6));
-----------------------------------------------------------------------------------------------------------------------------------
Print 1 to 10 within an internal of 2 seconds :

Approach 1 :

let count = 0;
function printValue(){
    count ++;
    if(count <= 10){
        console.log(count);
    setTimeout( printValue, 2000)
    }
}

printValue();

Approach 2:

function x(){
let c = 1;
let timer = setInterval(()=>{
    if (c === 10) {
        clearInterval(timer);
    }
  console.log(c++);
  },2000);
}
x();

Approach 3:

for (let i = 1; i <= 10; i++) {
  setTimeout(() => {
    console.log(i);
  }, i * 2000); // Delay each iteration by 2 seconds
}

Approach 4:

async function printNumbers() {
  for (let i = 1; i <= 10; i++) {
    await new Promise(resolve => setTimeout(resolve, 2000));
    console.log(i);
  }
}

printNumbers();

Approach 5:

function* numberGenerator() {
  for (let i = 1; i <= 10; i++) {
    yield i;
  }
}

const iterator = numberGenerator();
const intervalId = setInterval(() => {
  console.log(iterator.next().value);
}, 2000);

setTimeout(() => {
  clearInterval(intervalId);
}, 22000);

----------------------------------------------------------------------------------------------------------------------------
Infinite Currying:

function multiply(x){
    return function(y){
        if(y){
            return  multiply(x*y);
        }else{
            return x;
        }
    }
}

console.log(multiply(1)(2)(3)(4)(5)());

---------------------------------------------------------------------------------------------------------------------------------
How to reverse a string? 

  let str = "I am Sanu"; 
  console.log(str.split(' ').reverse().join(' ')); // Sanu am I
  console.log(str.split('').reverse().join('')); // unaS ma I

---------------------------------------------------------------------------------------------------------------------------------

Find the shortest string of an array with string elemnets:

const fruits = ["Apple", "Banana", "Orange", "Grapes", "Mango", "Lichi"];

function findShortest(arr){
    return arr.reduce((shortest, current)=>{
        return current.length < shortest.length ? current : shortest
    }, arr[0])
}

console.log(findShortest(fruits));

-----------------------------------------------------------------------------------------

Polyfills:- 

Polyfills are pieces of code that provide modern functionality to older browsers that lack native support for those features.

Implementation of own map function using polyfill:

Array.prototype.myMap = function (cb){
    let temp = [];
    for(let i = 0; i< this.length; i++){
        temp.push(cb(this[i],i, this));
    }
    return temp;
}

const nums = [1,2,3,4];

const multiplyByThree = nums.myMap((num, i , arr)=>{
    return num * 3 + i * 2;
})

console.log(multiplyByThree);

--------------------------------------------------------------------------------------------------------------

Implementation of own filter function using polyfill:

Array.prototype.myFilter = function (cb){
    let temp = [];
    for(let i = 0; i< this.length; i++){
        if(cb(this[i],i, this)) {
            temp.push(this[i]);
        }
    }
    return temp;
}

const nums = [1,2,3,4];

const EvenNumbers = nums.myFilter((num, i , arr)=>{
    return num%2 === 0 ;
})

console.log(EvenNumbers);
-----------------------------------------------------------------------------------------------------------------
Implementation of own Reduce Function using polyfill:

Array.prototype.myReduce = function (cb, initialValue){
    let accumulator = initialValue;
    for(let i = 0; i< this.length; i++){
        accumulator = accumulator ? cb(accumulator, this[i], i, this) : this[i];
    }
    return accumulator;
}

const nums = [1,2,3,4];

const multiply = nums.myReduce((acc, curr, i , arr)=>{
    return acc * curr ;
}, 1)

console.log(multiply);
--------------------------------------------------------------------------------------------------------------------------------
Suppouse You have an array with repeating elements. You need to create an Object with the elemnts and their occurence as key value pair. 
Please find key with max number of occurence within the object.

function countOccurence(arr) {
    let obj = {}
    arr.forEach(item => {
        if (obj[item]) {
            obj[item]++;
        } else {
            obj[item] = 1;
        }
    });
    return obj;
}

const array = [1, 2, 3, 4, 5, 1, 2, 2, 3, 4, 5, 5, 5];
const result = countOccurence(array);
console.log(result);

let max = result[array[0]];
for(let key in result){
    if(result[key] > max){
        max = result[key];
        index = key;
      }
    }
    console.log(`key:  ${index}`);
    console.log(`value:  ${max}`);
-----------------------------------------------------------------
Output based Question:

let a = true;
let b = false;
let c = null;

if (c == undefined){
    c= a+b;
    console.log("The value of C is: ", c)
}else{
    console.log("a+b = ", a+b);
}

o/p: The value of C is:  1
---------------------------------------------------------
let x = 5;
let y = x++ + ++x;
console.log(y);
console.log(x++ + ++x);
console.log(y-- + --y);

o/p: 
12
16
22

---------------------------------------------------------------------------

let x = 10;
{
    let x = 20;
    {
        console.log(x);
        let x = 30;
        console.log(x);
    }
    console.log(x);
}
console.log(x);

o/p:
Reference Error (variable x is declared with let keyword and We are trying to access the vriable when x is in Temporal Dead Zone)
30
20
10
------------------------------------------------------------------------------------------------------------
Implementing increment and decrement counter based on closure principal:


function counter(type){
    var count = 0;
    
    if(type === 'increment'){
        return function incrementCounter(){
        count ++;
        console.log(count)
    }
    }else {
        return function decrementCounter(){
        count --;
        console.log(count)
    }
    }
}

let counter1 = counter('increment');
let counter2 = counter('decrement');
counter1();
counter2();

o/p: 1, -1

Here we are creating 2 different counter variable for 2 different operations. 
But suppose, If I have to do both the operations on same count variable. 
Please find this approach below with a much more clear code:

function Counter(){
    var count = 0;
    this.increment = function(){
        count++;
        console.log(count);
    }
    this.decrement = function(){
        count--;
        console.log(count);
    }
}

var counter1 = new Counter();
counter1.increment();
counter1.increment();
counter1.decrement();
-----------------------------------------------------------------

 x = 10;
console.log('x :', x);
var x = 20;
console.log('x :',x);
setTimeout(()=>{
    console.log('x',x)
},5000);
x = 30;

o/p:
x : 10
x : 20
x 30

But If we declare this variable with let instead of var 

 x = 10;
console.log('x :', x);
let x = 20;  // declare this variable with let instead of var
console.log('x :',x);
setTimeout(()=>{
    console.log('x',x)
},5000);
x = 30;

Now x will be in Temporal Dead Zone. 
So, It will through a "ReferenceError: Cannot access 'x' before initialization"
-----------------------------------------------------------------------------------

console.log(10+20+"30")
console.log(10+"20"+30)
console.log("10"+20+30)
console.log("10"-20+30)
console.log(10-20+"30")

o/p:
3030
102030
102030
20
-1030

Reason: The associativity is always left to Right. "+" operator acts as concatenation operator.
"-" operator just tries to typecase it to a number initially
-----------------------------------------------------------------------------------------------------

const obj = Object.create({
    height: 30
})
console.log(obj.height);
delete obj.height;
console.log(obj.height);

o/p:
30
30

const obj = {
    height: 30
}
console.log(obj.height);
delete obj.height;
console.log(obj.height);

o/p:
30
undefined 

When you create an object with Object.cretae, it will store the properties in prototype. 
---------------------------------------------------------------------------------------------------------------

const original = {a:1, b:{c:2}};

let shallowcopy = {...original}
let deepcopy = JSON.parse(JSON.stringify(original))

original.b.c= 10;

console.log("Original", original);
console.log("Shallowcopy",shallowcopy);
console.log("deepcopy",deepcopy);

o/p:
Original { a: 1, b: { c: 10 } }
Shallowcopy { a: 1, b: { c: 10 } }
deepcopy { a: 1, b: { c: 2 } }

---------------------------------------------------------------------------------------------------------------------
How to put all the letters of a string in alphabetical order??

let str="Subhransu";
function test(s1){
    return (str.toLowerCase().split('').sort().join(''));
}
console.log(test(str));
--------------------------------------------------------------------------------------------------------------------
Write a function to union the elements of Array using JavaScript.

function union(arr1, arr2){
    return ([...new Set(arr1.concat(arr2))]);
}

console.log(union([1,2,3,4,5],[4,5,6,7]))

o/p:
[
  1, 2, 3, 4,
  5, 6, 7
]
----------------------------------------------------------------------------------------------------------------------------
Write a function to provide the number of vowels in an arbitary sentence or word:

let str = "English Teacher"
const vowels = ['a','e', 'i','o','u']

function countVowels(data){
    let d = data.toLowerCase();
    let v = d.split('').filter((x)=> vowels.includes(x));
    console.log(v)
    return (v.length);
}

const numberOfVowels = countVowels(str);

console.log(numberOfVowels);

-----------------------------------------------------------------------------------------------------------------------------
What will be the o/p:?

let x = 1+ val;
val = 20;
console.log(x);

A: Will get a Reference Error as val is never declared in the scope. JS Engine will not be able to recognize val here.
How to eliminate the Error?
let x = 1+ val;
var val = 20;
console.log(x);
o/p: NaN 
---------------------------------------------------------------------------------------------------------------------------
Relation between this Keyword and Arrow function in an Object:


let obj = {
    name: 'Sanu',
    age: '34',
    getIntro: ()=> {
        return (`This is ${this.name}. I am ${this.age} now.`)
    }
}

console.log(obj.getIntro());

o/p: This is undefined. I am undefined now.

Bcoz Arrow function cannot refeence the same object where it is defined. Instead it refers to the global object.
Whereas, we can resolve the issue and get an expected outcome using normal function.

let obj = {
    name: 'Sanu',
    age: '34',
    getIntro: function(){
        return (`This is ${this.name}. I am ${this.age} now.`)
    }
}

console.log(obj.getIntro());

o/p:- This is Sanu. I am 34 now.
-------------------------------------------------------------------------------------------------------------------------------------
Objetc Freeze: Will not allow to change any of the Object property value
Object.seal: Will not allow to add any new property to the Object but, it will allow to change already existing properties

const Person = {
    name: "Sanu",
    age: 34
}

console.log(Person);
Person.name = "Arpita"

Object.freeze(Person);
Person.name= "Bristi"
console.log(Person);

Person.city="Kolkata"
console.log(Person);

o/p-
{ name: 'Sanu', age: 34 }
{ name: 'Arpita', age: 34 }
{ name: 'Arpita', age: 34 }


const Person = {
    name: "Sanu",
    age: 34
}

Person.name = "Arpita"
console.log(Person);
Object.seal(Person);
Person.name= "Bristi"
console.log(Person);

Person.city="Kolkata"
console.log(Person);

o/p-
{ name: 'Arpita', age: 34 }
{ name: 'Bristi', age: 34 }
{ name: 'Bristi', age: 34 }

-----------------------------------------------------------------------------------------------------
Example of Higher Order function :

const Area = (r) => {
    return Math.PI * r * r;
}

const Circumference = (r) => {
    return 2 * Math.PI * r;
}

const Diameter = (r) => {
    return 2 * r;
}

function calculate(radius, logic) {
    const results = [];
    for(let i = 0; i < radius.length; i++) {
        results.push(logic(radius[i]));
    }
    return results;
}

const radius = [1, 2, 3, 4, 5];
console.log('Area Calculation : ', calculate(radius, Area));
console.log('Circumference Calculation : ', calculate(radius, Circumference));
console.log('Circumference Diameter : ', calculate(radius, Diameter));

o/p-
Area Calculation :  [
  3.141592653589793,
  12.566370614359172,
  28.274333882308138,
  50.26548245743669,
  78.53981633974483
]
Circumference Calculation :  [
  6.283185307179586,
  12.566370614359172,
  18.84955592153876,
  25.132741228718345,
  31.41592653589793
]
Circumference Diameter :  [ 2, 4, 6, 8, 10 ]
-------------------------------------------------------------------------------------------------------------------------------






